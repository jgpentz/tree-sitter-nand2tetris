// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Zx zero the x input?
    Mux16(a=x, b=false, sel=zx, out=zdx);
    
    // Nx negate the x input?
    Not16(in=zdx, out=notzdx);
    Mux16(a=zdx, b=notzdx, sel=nx, out=nxout);
    
    // Zy zero the y input?
    Mux16(a=y, b=false, sel=zy, out=zdy);
    
    // Ny negate the y input?
    Not16(in=zdy, out=notzdy);
    Mux16(a=zdy, b=notzdy, sel=ny, out=nyout);

    // f compute out = x + y (if 1) or x & y (if 0)
    // if (f == 0)  set out = x & y  // bitwise and
    // if (f == 1)  set out = x + y  // integer 2's complement addition
    And16(a=nxout, b=nyout, out=xAndy);
    Add16(a=nxout, b=nyout, out=xAddy);
    Mux16(a=xAndy, b=xAddy, sel=f, out=fout);

    // No negate the out output?
    // NOTE 1: we are using outRightHalf and outLeftHalf to avoid the error
    //         "cannot use output in internal chip part" (no recursion)
    // NOTE 2: also avoid the error "sub bus of internal node must not be used",
    //         e.g. caused by And(a=outLeftHand[7], b=true, out=ng);
    Not16(in=fout, out=notFout);
    Mux16(a=fout, b=notFout, sel=no, out[0..7]=outRightHalf, out[8..15]=outLeftHalf, out=out);
    
    // zr 1 if (out == 0), 0 otherwise
    Or8Way(in=outRightHalf, out=or8way1);
    Or8Way(in=outLeftHalf, out=or8way2);
    Or(a=or8way1, b=or8way2, out=orzr);
    Not(in=orzr, out=zr);

    // ng 1 if (out < 0),  0 otherwise
    And16(a[0..7]=outRightHalf, a[8..15]=outLeftHalf, b=true, out[15]=ng);
}
